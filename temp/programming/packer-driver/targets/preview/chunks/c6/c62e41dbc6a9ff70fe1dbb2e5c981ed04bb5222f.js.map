{"version":3,"sources":["file:///D:/Cocos/CocosWordLineCreative/assets/scripts/quiz/HintComponent.ts"],"names":["_decorator","Button","Color","Component","Sprite","ccclass","property","HintComponent","type","originalColor","WHITE","inactiveColor","isHintButtonActive","onLoad","updateHintColor","node","on","EventType","CLICK","onButtonCliecke","onDestroy","off","button","emit","ON_HINT_CLICKED","hintButton","color"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,M,OAAAA,M;;;;;;;;;OAC/C;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;+BAGjBO,a,WADZF,OAAO,CAAC,eAAD,C,UAQHC,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAACJ;AAAN,OAAD,C,sCARb,MACaG,aADb,SACmCJ,SADnC,CAC6C;AAAA;AAAA;AAAA,eAIxBM,aAJwB,GAIRP,KAAK,CAACQ,KAJE;AAAA,eAKxBC,aALwB,GAKR,IAAIT,KAAJ,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,CALQ;;AAAA;;AAAA,eAUjCU,kBAViC,GAUH,IAVG;AAAA;;AAYzCC,QAAAA,MAAM,GAAG;AACL,eAAKC,eAAL;AAEA,eAAKC,IAAL,CAAUC,EAAV,CAAaf,MAAM,CAACgB,SAAP,CAAiBC,KAA9B,EAAqC,KAAKC,eAA1C,EAA2D,IAA3D;AACH;;AAEDC,QAAAA,SAAS,GAAG;AACR,eAAKL,IAAL,CAAUM,GAAV,CAAcpB,MAAM,CAACgB,SAAP,CAAiBC,KAA/B,EAAsC,KAAKC,eAA3C,EAA4D,IAA5D;AACH;;AAEDA,QAAAA,eAAe,CAACG,MAAD,EAAiB;AAE5B,cAAI,CAAC,KAAKV,kBAAV,EACI;AAEJ,eAAKA,kBAAL,GAA0B,KAA1B;AACA,eAAKE,eAAL;AAEA,eAAKC,IAAL,CAAUQ,IAAV,CAAehB,aAAa,CAACiB,eAA7B,EAA8C,EAA9C;AACH;;AAEOV,QAAAA,eAAe,GAAG;AACtB,eAAKW,UAAL,CAAgBC,KAAhB,GAAwB,KAAKd,kBAAL,GAA0B,KAAKH,aAA/B,GAA+C,KAAKE,aAA5E;AACH;;AAnCwC,O,UAElBa,e,GAAkB,c;;;;;iBAMpB,I","sourcesContent":["import { _decorator, Button, Color, Component, Node, Sprite } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('HintComponent')\r\nexport class HintComponent extends Component {\r\n\r\n    public static readonly ON_HINT_CLICKED = \"hint_clicked\";\r\n    \r\n    private readonly originalColor = Color.WHITE;\r\n    private readonly inactiveColor = new Color(255, 255, 255, 100);\r\n\r\n    @property({type:Sprite})\r\n    private hintButton = null;\r\n\r\n    private isHintButtonActive: boolean = true;\r\n\r\n    onLoad() {\r\n        this.updateHintColor();\r\n\r\n        this.node.on(Button.EventType.CLICK, this.onButtonCliecke, this);\r\n    }\r\n\r\n    onDestroy() {\r\n        this.node.off(Button.EventType.CLICK, this.onButtonCliecke, this);\r\n    }\r\n\r\n    onButtonCliecke(button: Button) {\r\n        \r\n        if (!this.isHintButtonActive)\r\n            return;\r\n\r\n        this.isHintButtonActive = false;\r\n        this.updateHintColor();\r\n\r\n        this.node.emit(HintComponent.ON_HINT_CLICKED, {});\r\n    }\r\n\r\n    private updateHintColor() {\r\n        this.hintButton.color = this.isHintButtonActive ? this.originalColor : this.inactiveColor;\r\n    }\r\n}\r\n"]}