{"version":3,"sources":["file:///D:/Cocos/CocosSolitaireCreative/assets/scripts/crossword/CrosswordController.ts"],"names":["_decorator","Component","Node","instantiate","UITransform","resources","TextAsset","Crossword","CrosswordLetterComponent","super_html_playable","SoundController","ccclass","property","CrosswordController","type","crossword","start","load","err","textAsset","console","error","message","buildCrossword","text","config","build","transform","getComponent","spacingRatio","cellSize","width","getMaxSize","letterNode","setSize","cellSpaceSize","offsetX","sizeX","offsetY","sizeY","cells","forEach","cell","parent","node","setLetter","letter","setPosition","x","y","setNode","destroy","openWord","word","crosswordWord","words","find","cw","opened","sound","play","wrong","letterCells","some","i","length","changeState","letterComponent","repeatWordAnimation","correct","checkWinCondition","game_end","download"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, instantiate, UITransform, resources, TextAsset } from 'cc';\r\nimport { Crossword } from './Crossword';\r\nimport { CrosswordLetterComponent } from '../ui/CrosswordLetterComponent';\r\nimport { CrosswordWord } from './CrosswordWord';\r\nimport super_html_playable from '../services/super_html_playable';\r\nimport { CrosswordCell } from './CrosswordCell';\r\nimport { SoundController } from '../sound/SoundController';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CrosswordController')\r\nexport class CrosswordController extends Component {\r\n\r\n    @property({type:Node})\r\n    private letterNode = null;\r\n\r\n    @property({type:SoundController})\r\n    private sound = null;\r\n\r\n    public crossword: Crossword = new Crossword();\r\n\r\n    start() {\r\n        resources.load(\"configs/crossword\", TextAsset, (err, textAsset) => {\r\n            if (err) {\r\n                console.error(err.message);\r\n                return\r\n            }\r\n\r\n            this.buildCrossword(textAsset.text);\r\n        });\r\n    }\r\n\r\n    buildCrossword(config: string) {\r\n        this.crossword.build(config);\r\n        \r\n        const transform = this.getComponent(UITransform);\r\n        const spacingRatio = 0.05;\r\n        const cellSize = (1 - spacingRatio) * transform.width / this.crossword.getMaxSize();\r\n\r\n        this.letterNode.getComponent(CrosswordLetterComponent).setSize(cellSize);\r\n        const cellSpaceSize = (1 + spacingRatio) * cellSize;\r\n\r\n        const offsetX = -cellSpaceSize * this.crossword.sizeX / 2 + cellSpaceSize / 2;\r\n        const offsetY =  cellSpaceSize * this.crossword.sizeY / 2 - cellSpaceSize / 2;\r\n\r\n        this.crossword.cells.forEach(cell => {\r\n            let letterNode = instantiate(this.letterNode);\r\n            letterNode.parent = this.node;\r\n            letterNode.getComponent(CrosswordLetterComponent).setLetter(cell.letter);\r\n            letterNode.setPosition(offsetX + cell.x * cellSpaceSize, offsetY - cell.y * cellSpaceSize, 0);\r\n            cell.setNode(letterNode);\r\n        });\r\n\r\n        this.letterNode.destroy();\r\n    }\r\n\r\n    openWord(word: string): {crosswordWord: CrosswordWord, opened: boolean} {\r\n\r\n        const crosswordWord: CrosswordWord = this.crossword.words.find(cw => cw.word === word);\r\n        let opened: boolean = false;\r\n        if (!crosswordWord) {\r\n            this.sound.play(this.sound.wrong);\r\n            return {crosswordWord, opened};\r\n        }\r\n\r\n        opened = crosswordWord.letterCells.some(cell => !cell.opened) ? true : false;\r\n\r\n        for (let i = 0; i < crosswordWord.letterCells.length; i++) {\r\n            if (opened) crosswordWord.letterCells[i].changeState(true);\r\n            else crosswordWord.letterCells[i].letterComponent.repeatWordAnimation();\r\n        }\r\n\r\n        if (opened) {\r\n            this.sound.play(this.sound.correct);\r\n            this.checkWinCondition();\r\n        }\r\n        else {\r\n            this.sound.play(this.sound.wrong);\r\n        }\r\n\r\n        return {crosswordWord, opened};\r\n    }\r\n\r\n    checkWinCondition() {\r\n        if (this.crossword.cells.some(cell => !cell.opened)) return;\r\n        super_html_playable.game_end();\r\n        super_html_playable.download();\r\n    }\r\n}"]}