{"version":3,"sources":["file:///D:/Cocos/CocosWordLineCreative/assets/scripts/quiz/QuizController.ts"],"names":["_decorator","Animation","Component","math","resources","SpriteFrame","TextAsset","tween","QuizDescription","QuizVariant","QuizData","HintComponent","CorrectLabelComponent","ResultScreen","super_html_playable","ccclass","property","QuizController","type","quizShakeClipName","quizIndex","quizData","correctCount","onLoad","variants","forEach","v","node","on","SELECTED_EVENT","onVariantSelected","hint","ON_HINT_CLICKED","onHintClicked","onDestroy","off","start","load","err","textAsset","console","log","message","buildQuiz","text","applyData","getActiveVariants","filter","active","config","quizSplits","split","i","length","data","build","push","getCurrentQuizData","pathToImage","spriteFrame","description","set","reset","wordVariants","correctVariantIndex","emit","VARIANTS_UPDATED","changeQuiz","game_end","download","result","show","event","index","VARIANT_SELECTED","quiz","correctTween","correct","call","animation","play","delay","getState","clip","duration","correctIndex","randomIndex","randomRangeInt"],"mappings":"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","sourcesContent":["import { _decorator, Animation, Component, math, resources, SpriteFrame, TextAsset, tween } from 'cc';\r\nimport { QuizDescription } from './QuizDescription';\r\nimport { QuizVariant } from './QuizVariant';\r\nimport { QuizData } from './QuizData';\r\nimport { HintComponent } from './HintComponent';\r\nimport { CorrectLabelComponent } from '../wordConnect/CorrectLabelComponent';\r\nimport { ResultScreen } from './ResultScreen';\r\nimport super_html_playable from '../services/super_html_playable';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('QuizController')\r\nexport class QuizController extends Component {\r\n\r\n    public static readonly VARIANTS_UPDATED = \"variants_updated\";\r\n    public static readonly VARIANT_SELECTED = \"variant_selected\";\r\n\r\n    private readonly quizShakeClipName = \"quizShake\";\r\n\r\n    @property({type:QuizDescription})\r\n    private description = null;\r\n\r\n    @property([QuizVariant])\r\n    private variants: QuizVariant[] = [];\r\n\r\n    @property({type:HintComponent})\r\n    private hint = null;\r\n\r\n    @property({type:CorrectLabelComponent})\r\n    private correct = null;\r\n\r\n    @property({type:ResultScreen})\r\n    private result = null;\r\n\r\n    @property({type:Animation})\r\n    private animation = null;\r\n\r\n    private quizIndex;\r\n    private quizData: QuizData[];\r\n\r\n    private correctCount: number = 0;\r\n    \r\n    onLoad() {\r\n        this.variants.forEach(v => {\r\n            v.node.on(QuizVariant.SELECTED_EVENT, this.onVariantSelected, this);\r\n        });\r\n\r\n        this.hint.node.on(HintComponent.ON_HINT_CLICKED, this.onHintClicked, this);\r\n    }\r\n\r\n    onDestroy() {\r\n        this.variants.forEach(v => {\r\n            v.node.off(QuizVariant.SELECTED_EVENT, this.onVariantSelected, this);\r\n        });\r\n\r\n        this.hint.node.off(HintComponent.ON_HINT_CLICKED, this.onHintClicked, this);\r\n    }\r\n\r\n    start() {\r\n        //resources.load(\"configs/quizConfig\", TextAsset, (err, textAsset) => {\r\n        resources.load(\"configs/quizConfigEN\", TextAsset, (err, textAsset) => {\r\n            if (err) {\r\n                console.log(err.message);\r\n                return;\r\n            }\r\n\r\n            this.buildQuiz(textAsset.text);\r\n            \r\n            this.quizIndex = 0;\r\n            this.applyData();\r\n\r\n        });\r\n    }\r\n\r\n    getActiveVariants() : QuizVariant[] {\r\n        return this.variants.filter(v => v.node.active == true);\r\n    }\r\n\r\n    private buildQuiz(config: string) {\r\n        this.quizData = [];\r\n\r\n        const quizSplits = config.split('\\n');\r\n\r\n        for (let i = 0; i < quizSplits.length; i++) {\r\n            const data = new QuizData();\r\n            data.build(quizSplits[i]);\r\n            this.quizData.push(data);\r\n        }\r\n    }\r\n\r\n    \r\n    private getCurrentQuizData() : QuizData {\r\n        return this.quizData[this.quizIndex];\r\n    }\r\n\r\n    private applyData() {\r\n        const data: QuizData = this.getCurrentQuizData();\r\n\r\n        resources.load(data.pathToImage+'/spriteFrame', SpriteFrame, (err, spriteFrame) => {\r\n\r\n            if (err) {\r\n                console.log(err.message);\r\n                return;\r\n            }\r\n\r\n            this.description.set(spriteFrame, this.quizIndex + 1, this.quizData.length, data.description);\r\n            this.variants.forEach((v, i) => {\r\n                const data: QuizData = this.getCurrentQuizData();\r\n                v.node.active = true;\r\n                v.reset();\r\n                v.set(data.wordVariants[i], i, i == data.correctVariantIndex);\r\n            });\r\n\r\n            this.node.emit(QuizController.VARIANTS_UPDATED, { });\r\n        });\r\n    }\r\n\r\n    private changeQuiz() {\r\n        this.quizIndex++;\r\n\r\n        if (this.quizIndex >= this.quizData.length) {\r\n            super_html_playable.game_end();\r\n            super_html_playable.download();\r\n            this.result.show(this.correctCount == this.quizData.length);\r\n            return;\r\n        }\r\n\r\n        this.applyData();\r\n    }\r\n\r\n    private onVariantSelected(event) {\r\n\r\n        const index = event.index;\r\n        this.node.emit(QuizController.VARIANT_SELECTED, {index: index});\r\n\r\n        const quiz = this.getCurrentQuizData();\r\n        \r\n        if (index == quiz.correctVariantIndex) {\r\n            this.correctCount++;\r\n\r\n            const correctTween = this.correct.show();\r\n            correctTween\r\n                .call (() => {\r\n                    this.changeQuiz();\r\n                })\r\n                .start();\r\n        }\r\n        else {\r\n            tween(this.node)\r\n                .call(() => this.animation.play(this.quizShakeClipName))\r\n                .delay(this.animation.getState(this.quizShakeClipName).clip.duration)\r\n                .call(() => {\r\n                    this.changeQuiz();\r\n                })\r\n                .start();\r\n        }\r\n    }\r\n\r\n    private onHintClicked(event) {\r\n\r\n        const quizData = this.getCurrentQuizData();\r\n\r\n        const correctIndex = quizData.correctVariantIndex;\r\n        let randomIndex = math.randomRangeInt(0, quizData.wordVariants.length - 1);\r\n\r\n        if (randomIndex == correctIndex) {\r\n            randomIndex = (randomIndex + 1) % quizData.wordVariants.length;\r\n        }\r\n\r\n        this.variants.forEach((v, i) => {\r\n            v.node.active = i == correctIndex || i == randomIndex;\r\n        });\r\n\r\n        this.node.emit(QuizController.VARIANTS_UPDATED, { });\r\n    }\r\n}\r\n"]}