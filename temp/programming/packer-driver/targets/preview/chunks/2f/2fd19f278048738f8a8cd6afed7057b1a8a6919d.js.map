{"version":3,"sources":["file:///D:/Cocos/CocosWordLineCreative/assets/scripts/wordConnect/spelling/SpellingVariant.ts"],"names":["_decorator","Color","Component","Label","Sprite","Animation","ccclass","property","SpellingVariant","type","correctColor","uncorrectColor","fadeInClipName","index","isClicked","isBlocked","set","word","isCorrect","block","wordLabel","string","checkSprite","color","onLoad","animation","on","EventType","FINISHED","onAnimationFinished","onDestroy","off","onButtonClicked","play","state","clip","name","node","emit","SELECTED_EVENT"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,S,OAAAA,S;;;;;;;;;OAChD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;iCAGjBQ,e,WADZF,OAAO,CAAC,iBAAD,C,UAUHC,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEN;AAAP,OAAD,C,UAGRI,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEL;AAAP,OAAD,C,UAGRG,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAACJ;AAAN,OAAD,C,sCAhBb,MACaG,eADb,SACqCN,SADrC,CAC+C;AAAA;AAAA;AAAA,eAI1BQ,YAJ0B,GAIJ,IAAIT,KAAJ,CAAU,CAAV,EAAa,GAAb,EAAkB,CAAlB,EAAqB,CAArB,CAJI;AAAA,eAK1BU,cAL0B,GAKF,IAAIV,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CALE;AAAA,eAO1BW,cAP0B,GAOT,uBAPS;;AAAA;;AAAA;;AAAA;;AAAA,eAkBnCC,KAlBmC;AAAA,eAmBnCC,SAnBmC;AAAA,eAoBnCC,SApBmC;AAAA;;AAsB3CC,QAAAA,GAAG,CAACC,IAAD,EAAeJ,KAAf,EAA8BK,SAA9B,EAAkD;AAEjD,eAAKJ,SAAL,GAAiB,KAAjB;AACA,eAAKK,KAAL,CAAW,KAAX;AAEA,eAAKN,KAAL,GAAaA,KAAb;AACA,eAAKO,SAAL,CAAeC,MAAf,GAAwBJ,IAAxB;AACA,eAAKK,WAAL,CAAiBC,KAAjB,GAAyBL,SAAS,GAAG,KAAKR,YAAR,GAAuB,KAAKC,cAA9D;AACH;;AAEDa,QAAAA,MAAM,GAAG;AACL,eAAKC,SAAL,CAAeC,EAAf,CAAkBrB,SAAS,CAACsB,SAAV,CAAoBC,QAAtC,EAAgD,KAAKC,mBAArD,EAA0E,IAA1E;AACH;;AAEDC,QAAAA,SAAS,GACT;AACI,eAAKL,SAAL,CAAeM,GAAf,CAAmB1B,SAAS,CAACsB,SAAV,CAAoBC,QAAvC,EAAiD,KAAKC,mBAAtD,EAA2E,IAA3E;AACH;;AAEDG,QAAAA,eAAe,GAAG;AAEd,cAAI,KAAKlB,SAAL,IAAkB,KAAKC,SAA3B,EACI;AAEJ,eAAKD,SAAL,GAAiB,IAAjB;AACA,eAAKW,SAAL,CAAeQ,IAAf,CAAoB,KAAKrB,cAAzB;AACH;;AAEDO,QAAAA,KAAK,CAACJ,SAAD,EAAqB;AACtB,eAAKA,SAAL,GAAiBA,SAAjB;AACH;;AAEOc,QAAAA,mBAAmB,CAACpB,IAAD,EAA4ByB,KAA5B,EAAmD;AAE1E,cAAIA,KAAK,CAACC,IAAN,CAAWC,IAAX,IAAmB,KAAKxB,cAA5B,EACI;AAEJ,eAAKyB,IAAL,CAAUC,IAAV,CAAe9B,eAAe,CAAC+B,cAA/B,EAA+C;AAAE1B,YAAAA,KAAK,EAAE,KAAKA;AAAd,WAA/C;AACH;;AA5D0C,O,UAEpB0B,c,GAAyB,U;;;;;iBAQ5B,I;;;;;;;iBAGE,I;;;;;;;iBAGF,I","sourcesContent":["import { _decorator, Color, Component, Label, Sprite, Animation, AnimationState } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('SpellingVariant')\r\nexport class SpellingVariant extends Component {\r\n    \r\n    public static readonly SELECTED_EVENT: string = \"selected\";\r\n\r\n    private readonly correctColor: Color = new Color(0, 255, 0, 0);\r\n    private readonly uncorrectColor: Color = new Color(255, 0, 0, 0);\r\n\r\n    private readonly fadeInClipName = \"fadeInSpellingVariant\";\r\n\r\n    @property({type: Label})\r\n    private wordLabel = null;\r\n\r\n    @property({type: Sprite})\r\n    private checkSprite = null;\r\n\r\n    @property({type:Animation})\r\n    private animation = null;\r\n\r\n    private index: number;\r\n    private isClicked: boolean;\r\n    private isBlocked: boolean;\r\n\r\n    set(word: string, index: number, isCorrect: boolean) {\r\n\r\n        this.isClicked = false;\r\n        this.block(false);\r\n\r\n        this.index = index;\r\n        this.wordLabel.string = word;\r\n        this.checkSprite.color = isCorrect ? this.correctColor : this.uncorrectColor;\r\n    }\r\n\r\n    onLoad() {\r\n        this.animation.on(Animation.EventType.FINISHED, this.onAnimationFinished, this);\r\n    }\r\n    \r\n    onDestroy() \r\n    {\r\n        this.animation.off(Animation.EventType.FINISHED, this.onAnimationFinished, this);\r\n    }\r\n\r\n    onButtonClicked() {\r\n\r\n        if (this.isClicked || this.isBlocked)\r\n            return;\r\n\r\n        this.isClicked = true;\r\n        this.animation.play(this.fadeInClipName);\r\n    }\r\n\r\n    block(isBlocked: boolean) {\r\n        this.isBlocked = isBlocked;\r\n    }\r\n\r\n    private onAnimationFinished(type: Animation.EventType, state: AnimationState) {\r\n\r\n        if (state.clip.name != this.fadeInClipName)\r\n            return;\r\n\r\n        this.node.emit(SpellingVariant.SELECTED_EVENT, { index: this.index });\r\n    }\r\n}\r\n"]}