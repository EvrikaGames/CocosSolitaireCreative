{"version":3,"sources":["file:///D:/Cocos/CocosWordLineCreative/assets/scripts/quiz/TutorialHandMover.ts"],"names":["_decorator","Component","Node","tween","Vec3","QuizController","ccclass","property","TutorialHandMover","type","timeToActivate","shouldActivate","remainingTime","repeatTween","to","toScaleTween","onLoad","quiz","node","on","VARIANTS_UPDATED","shouldShowHand","VARIANT_SELECTED","hideHand","onDestroy","off","start","hand","active","firstTarget","update","deltaTime","moveHand","moveDelay","scaleToNormal","variants","getActiveVariants","variantIndex","setWorldPosition","getWorldPosition","callMoveTween","call","worldPosition","scale","ONE","delayTween","delay","changeTo","length","sequence","repeatForever","stop","setScale"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, tween, Tween, Vec3 } from 'cc';\r\nimport { QuizController } from './QuizController';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('TutorialHandMover')\r\nexport class TutorialHandMover extends Component {\r\n    \r\n    private readonly timeToActivate: number = 2;\r\n\r\n    @property({type:QuizController})\r\n    private quiz = null;\r\n\r\n    @property({type:Node})\r\n    private hand = null;\r\n    \r\n    @property({type:Node})\r\n    private firstTarget = null;\r\n\r\n    private shouldActivate: boolean;\r\n    private remainingTime: number;\r\n    private repeatTween: Tween<Node>;\r\n\r\n    private to: Node;\r\n    private toScaleTween: Tween<Node>;\r\n\r\n    onLoad() {\r\n        this.quiz.node.on(QuizController.VARIANTS_UPDATED, this.shouldShowHand, this);\r\n        this.quiz.node.on(QuizController.VARIANT_SELECTED, this.hideHand, this);\r\n    }\r\n\r\n    onDestroy() {\r\n        this.quiz.node.off(QuizController.VARIANTS_UPDATED, this.shouldShowHand, this);\r\n        this.quiz.node.off(QuizController.VARIANT_SELECTED, this.hideHand, this);\r\n    }\r\n\r\n    start() {\r\n        this.hand.active = false;\r\n        this.shouldActivate = false;\r\n        this.to = this.firstTarget;\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        \r\n        if (!this.shouldActivate)\r\n            return;\r\n\r\n        this.remainingTime -= deltaTime;\r\n        \r\n        if (this.remainingTime > 0)\r\n            return;\r\n\r\n        this.shouldActivate = false;\r\n        this.moveHand();\r\n    }\r\n\r\n    private moveHand() {\r\n        this.hand.active = true;\r\n\r\n        const moveDelay = 0.5;\r\n        const scaleToNormal = 0.3;\r\n        const variants = this.quiz.getActiveVariants();\r\n\r\n        let variantIndex = 0;\r\n        this.to = variants[variantIndex].node;\r\n\r\n        this.hand.setWorldPosition(this.firstTarget.getWorldPosition());\r\n\r\n        const callMoveTween = tween(this.node)\r\n            .call(() => {\r\n                tween(this.hand)\r\n                    .to(moveDelay, { worldPosition: this.to.getWorldPosition() })\r\n                    .start();\r\n\r\n                this.toScaleTween = tween(this.to)\r\n                    .to(moveDelay, { scale: new Vec3(1.1, 1.1) })\r\n                    .to(scaleToNormal, { scale: Vec3.ONE })\r\n                    .start();\r\n\r\n            });\r\n\r\n        const delayTween = tween(this.node)\r\n            .delay(moveDelay + scaleToNormal);\r\n\r\n        const changeTo = tween(this.node)\r\n            .call(() => {\r\n                variantIndex = (variantIndex + 1) % variants.length;\r\n                this.to = variants[variantIndex].node;\r\n            });\r\n\r\n        this.repeatTween = tween(this.node)\r\n            .sequence(callMoveTween, delayTween, changeTo)\r\n            .repeatForever()\r\n            .start();\r\n    }\r\n\r\n    private shouldShowHand() {\r\n        \r\n        if (this.repeatTween)\r\n            this.hideHand();\r\n        \r\n        this.hand.active = false;\r\n        this.shouldActivate = true;\r\n        this.remainingTime = this.timeToActivate;\r\n    }\r\n\r\n    private hideHand() {\r\n\r\n        if (this.repeatTween)\r\n            this.repeatTween.stop();\r\n\r\n        this.hand.active = false;\r\n        this.shouldActivate = false;\r\n\r\n        if (this.toScaleTween)\r\n            this.toScaleTween.stop();\r\n\r\n        this.to.setScale(Vec3.ONE);\r\n    }\r\n}\r\n"]}