{"version":3,"sources":["file:///D:/Cocos/CocosSolitaireCreative/assets/scripts/ui/ScreenScaler.ts"],"names":["_decorator","Component","Node","screen","Vec2","Vec3","view","ResolutionPolicy","Widget","ccclass","property","ScreenScaler","type","originalWidth","originalHeigth","connectorVerticalOffset","hintHorizontalOffset","hintVerticalOffset","originalRatio","horizontalState","originalCrosswordPosition","originalConnectorPosition","start","crossword","getPosition","connector","onWindowResize","windowSize","width","height","onLoad","on","onDestroy","off","currentHorizontalState","setDesignResolutionSize","FIXED_WIDTH","setPosition","hintWidget","isAlignBottom","bottom","x","isAlignRight","right","y","FIXED_HEIGHT","pos","isAlignVerticalCenter","verticalCenter","ratio","scale","setScale","isAlignHorizontalCenter","horizontalCenter"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, screen, Vec2, Vec3, view, ResolutionPolicy, Widget } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('ScreenScaler')\r\nexport class ScreenScaler extends Component {\r\n\r\n    @property({type:Node})\r\n    private crossword = null;\r\n\r\n    @property({type:Node})\r\n    private connector = null;\r\n\r\n    @property({type:Widget})\r\n    private hintWidget = null;\r\n\r\n    private originalWidth: number = 1280;\r\n    private originalHeigth: number = 720;\r\n    \r\n    private connectorVerticalOffset: number = 30;\r\n    private hintHorizontalOffset: Vec2 = new Vec2(50, 50);\r\n    private hintVerticalOffset: Vec2 = new Vec2(240, -120);\r\n\r\n    private originalRatio: number = this.originalHeigth / this.originalWidth;\r\n    private horizontalState: boolean = true;\r\n\r\n    private originalCrosswordPosition: Vec3;\r\n    private originalConnectorPosition: Vec3;\r\n\r\n    start() {\r\n        this.originalCrosswordPosition = this.crossword.getPosition();\r\n        this.originalConnectorPosition = this.connector.getPosition();\r\n        \r\n        this.onWindowResize(screen.windowSize.width, screen.windowSize.height);\r\n    }\r\n\r\n    onLoad() {\r\n        screen.on('window-resize', this.onWindowResize, this);\r\n    }\r\n    \r\n    onDestroy() {\r\n        screen.off('window-resize', this.onWindowResize, this);\r\n    }\r\n\r\n\r\n    onWindowResize(width: number, height: number) {\r\n        const currentHorizontalState = width >= height;\r\n\r\n        if (currentHorizontalState != this.horizontalState) {\r\n\r\n            this.horizontalState = currentHorizontalState;\r\n\r\n            if (currentHorizontalState) {\r\n                view.setDesignResolutionSize(this.originalWidth, this.originalHeigth, ResolutionPolicy.FIXED_WIDTH);\r\n\r\n                this.crossword.setPosition(this.originalCrosswordPosition);\r\n                this.connector.setPosition(this.originalConnectorPosition);\r\n\r\n                this.hintWidget.isAlignBottom = true;\r\n                this.hintWidget.bottom = this.hintHorizontalOffset.x;\r\n                this.hintWidget.isAlignRight = true;\r\n                this.hintWidget.right = this.hintHorizontalOffset.y;\r\n            }\r\n            else {\r\n                view.setDesignResolutionSize(this.originalHeigth, this.originalWidth, ResolutionPolicy.FIXED_HEIGHT);\r\n\r\n                let pos = new Vec3(this.originalCrosswordPosition.y, -this.originalCrosswordPosition.x);\r\n                this.crossword.setPosition(pos);\r\n\r\n                pos = new Vec3(this.originalConnectorPosition.y, this.connectorVerticalOffset - this.originalConnectorPosition.x);\r\n                this.connector.setPosition(pos);\r\n\r\n                this.hintWidget.isAlignVerticalCenter = true;\r\n                this.hintWidget.verticalCenter = this.hintVerticalOffset.y;\r\n            }\r\n        }\r\n\r\n        const ratio = currentHorizontalState ? height / width : width / height;\r\n        let scale = ratio / this.originalRatio;\r\n        if (scale > 1) scale = 1;\r\n        \r\n        this.crossword.setScale(scale, scale);\r\n        this.connector.setScale(scale, scale);\r\n\r\n        if (!currentHorizontalState) {\r\n            this.hintWidget.isAlignHorizontalCenter = true;\r\n            this.hintWidget.horizontalCenter = this.hintVerticalOffset.x * scale;\r\n        }\r\n    }\r\n}\r\n\r\n"]}