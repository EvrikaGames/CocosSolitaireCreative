{"version":3,"sources":["file:///D:/Cocos/CocosSolitaireCreative/assets/scripts/solitaire/Game.ts"],"names":["_decorator","Component","instantiate","Label","Node","Prefab","Vec3","Card","Word","Letter","ccclass","property","GameController","predefinedDeck","letter","position","revealed","predefinedWords","letters","completed","predefinedSentences","predefinedWordStrings","currentWord","currentWordIndex","currentSentenceIndex","completedWords","letterSlots","currentLetterIndex","onLoad","createCards","sentenceLabel","string","createCompletedWords","createSlots","i","length","pile","j","cardData","cardNode","cardPrefab","card","getComponent","init","setPosition","getCardPosition","cardContainer","addChild","pileIndex","cardIndex","completedWordNode","completedWordPrefab","push","getCompletedWordPosition","completedWordContainer","selectWord","yPos","len","letterSlotNode","letterSlotPrefab","letterSlot","getSlotPosition","letterSlotContainer","deleteSlots","forEach","slot","destroy","num","moveCardToWord","setCard","isWordRight","removeCard","setString","getCard","returnCardToPosition","isRight","checkWinCondition","word","console","log"],"mappings":"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","sourcesContent":["import { _decorator, Color, Component, instantiate, Label, Node, Prefab, Vec2, Vec3 } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport Card from './Card'; // Импортируйте ваш класс Card\r\nimport { ICardData } from './ICardData';\r\nimport { IWordData } from './IWordData';\r\nimport { Word } from './Word';\r\nimport { Letter } from './Letter';\r\n\r\n@ccclass\r\nexport default class GameController extends Component {\r\n\r\n    @property(Label)\r\n    sentenceLabel: Label;\r\n\r\n    @property(Prefab)\r\n    cardPrefab: Prefab = null;\r\n\r\n    @property(Node)\r\n    cardContainer: Node = null;\r\n\r\n    @property(Prefab)\r\n    completedWordPrefab: Prefab = null;\r\n\r\n    @property(Node)\r\n    completedWordContainer: Node = null;\r\n\r\n    @property(Prefab)\r\n    letterSlotPrefab: Prefab = null;\r\n\r\n    @property(Node)\r\n    letterSlotContainer: Node = null;\r\n\r\n\r\n    predefinedDeck: ICardData[][] = [\r\n        [{ letter: 'S', position: 1, revealed: false }, { letter: 'A', position: 1, revealed: false }, { letter: 'W', position: 1, revealed: false }, \r\n            { letter: 'I', position: 1, revealed: false }, { letter: 'B', position: 1, revealed: false }, { letter: 'S', position: 1, revealed: true }],\r\n\r\n        [{ letter: 'E', position: 2, revealed: false }, { letter: 'R', position: 2, revealed: false }, { letter: 'S', position: 2, revealed: false }, \r\n            { letter: 'N', position: 2, revealed: false }, { letter: 'A', position: 2, revealed: false }, { letter: 'U', position: 2, revealed: true }],\r\n\r\n        [{ letter: 'A', position: 3, revealed: false }, { letter: 'M', position: 3, revealed: false }, { letter: 'A', position: 3, revealed: false }, \r\n            { letter: 'G', position: 3, revealed: false }, { letter: 'E', position: 3, revealed: false }, { letter: 'N', position: 3, revealed: true }],\r\n\r\n        [{ letter: 'E', position: 4, revealed: false }, { letter: 'T', position: 4, revealed: false }, { letter: 'N', position: 4, revealed: false }, \r\n            { letter: 'H', position: 4, revealed: false }, { letter: 'C', position: 4, revealed: false }, { letter: 'N', position: 4, revealed: true }],\r\n\r\n        [{ letter: 'E', position: 5, revealed: false }, { letter: 'R', position: 5, revealed: false }, { letter: 'D', position: 5, revealed: false }, \r\n            { letter: 'T', position: 5, revealed: false }, { letter: 'H', position: 5, revealed: false }, { letter: 'Y', position: 5, revealed: true }]\r\n    ];\r\n\r\n    predefinedWords: IWordData[] = [\r\n        { letters: ['S', 'U', 'N', 'N', 'Y'], completed: false },\r\n        { letters: ['B', 'E', 'A', 'C', 'H'], completed: false },\r\n        { letters: ['N', 'I', 'G', 'T', 'H'], completed: false },\r\n        { letters: ['W', 'A', 'R', 'M'], completed: false },\r\n        { letters: ['H', 'E', 'L', 'L', 'O'], completed: false },\r\n        { letters: ['H', 'E', 'L', 'L', 'O'], completed: false },\r\n        { letters: ['H', 'E', 'L', 'L', 'O'], completed: false },\r\n        { letters: ['H', 'E', 'L', 'L', 'O'], completed: false }\r\n    ];\r\n\r\n    predefinedSentences: string[] = [\r\n        \"IF IT'S NOT CLOUDY, IT'S __\", \r\n        \"IF IT'S NOT OCEAN, IT'S __\", \r\n        \"IF IT'S NOT DAY, IT'S __\", \r\n        \"IF IT'S NOT STONE, IT'S __\", \r\n        \"IF IT'S NOT COLD, IT'S __\",\r\n        \"IF IT'S NOT BUSH, IT'S __\"\r\n    ];\r\n\r\n    predefinedWordStrings: string[] = [\r\n        \"SUNNY\", \r\n        \"BEACH\", \r\n        \"NIGHT\", \r\n        \"WARM\"\r\n    ];\r\n\r\n    currentWord: string[] = [];\r\n    currentWordIndex: number = 0;\r\n    currentSentenceIndex: number = 0;\r\n    completedWords: Word[] = [];\r\n    letterSlots: Letter[] = [];\r\n    currentLetterIndex: number = 0;\r\n\r\n    onLoad() {\r\n        this.createCards();\r\n        this.sentenceLabel.string = this.predefinedSentences[this.currentSentenceIndex];\r\n        this.createCompletedWords();\r\n        this.createSlots();\r\n        \r\n    }\r\n\r\n\r\n    createCards() {\r\n        for (let i = 0; i < this.predefinedDeck.length; i++) {\r\n            const pile = this.predefinedDeck[i];\r\n            for (let j = 0; j < pile.length; j++) {\r\n                const cardData = pile[j];\r\n                const cardNode = instantiate(this.cardPrefab);\r\n                const card = cardNode.getComponent(Card);\r\n                card.init(cardData);\r\n                cardNode.setPosition(this.getCardPosition(i, j));\r\n                this.cardContainer.addChild(cardNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    getCardPosition(pileIndex: number, cardIndex: number): Vec3 {\r\n        return new Vec3(pileIndex * 120, cardIndex * -30, 0);\r\n    }\r\n\r\n    createCompletedWords(){\r\n        for (let j = 0; j < this.predefinedWords.length; j++) {\r\n            const completedWordNode = instantiate(this.completedWordPrefab);\r\n            this.completedWords.push(completedWordNode.getComponent(Word));\r\n            completedWordNode.setPosition(this.getCompletedWordPosition(j, j % 2 == 0 ? j : j - 1));\r\n            this.completedWordContainer.addChild(completedWordNode);\r\n        }\r\n        this.completedWords[this.currentWordIndex].selectWord();\r\n    }\r\n    getCompletedWordPosition(pileIndex: number, yPos: number): Vec3 {\r\n        return new Vec3((pileIndex % 2) * 212, yPos * -34);\r\n    }\r\n\r\n    createSlots(){\r\n        let len = this.predefinedWords[this.currentWordIndex].letters.length;\r\n        for(let i = 0; i < len; i++){\r\n            const letterSlotNode = instantiate(this.letterSlotPrefab);\r\n            const letterSlot = letterSlotNode.getComponent(Letter);\r\n            letterSlot.init(this.predefinedWords[this.currentWordIndex].letters[i]);\r\n            this.letterSlots.push(letterSlot);\r\n            letterSlotNode.setPosition(this.getSlotPosition(i, len));\r\n            this.letterSlotContainer.addChild(letterSlotNode);\r\n        }\r\n    }\r\n    deleteSlots(){\r\n        this.letterSlots.forEach(slot => {\r\n            slot.destroy;\r\n        });\r\n    }\r\n    getSlotPosition(num: number, len: number): Vec3 {\r\n        return new Vec3(len % 2 == 0 ? (num < len / 2 ? ((len / 2 - 1 / 2 - num) * -86) : ((num - len / 2 + 1 / 2) * 86)) : (num < len / 2 ? \r\n            ((len / 2 - 1 / 2 - num) * -86) : (num - (len / 2 - 1 /2)) * 86), 0, 0);\r\n    }\r\n\r\n    moveCardToWord(card: Card){\r\n        this.letterSlots[this.currentLetterIndex].setCard(card);\r\n        this.currentLetterIndex++;\r\n        if(this.currentLetterIndex >= this.letterSlots.length){\r\n            if(this.isWordRight()){\r\n                this.letterSlots.forEach(slot => {\r\n                    slot.removeCard();\r\n                });\r\n                this.completedWords[this.currentWordIndex].setString(this.predefinedWordStrings[this.currentWordIndex]);\r\n                this.currentWordIndex++;\r\n                this.completedWords[this.currentWordIndex].selectWord();\r\n                this.deleteSlots();\r\n                this.createSlots();\r\n            }else{\r\n                this.letterSlots.forEach(slot => {\r\n                    slot.getCard().returnCardToPosition();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    isWordRight(): boolean{\r\n        for(let i = 0; i < this.letterSlots.length; i++){\r\n            if(this.letterSlots[i].isRight == false)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    checkWinCondition() {\r\n        for (let word of this.predefinedWords) {\r\n            if (!word.completed) {\r\n                return false;\r\n            }\r\n        }\r\n        console.log('Победа!');\r\n        return true;\r\n    }\r\n\r\n}\r\n"]}